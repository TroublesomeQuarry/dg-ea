#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GUI
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="EaGUI")]
	public partial class DB : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDataElement(GUI.Model.DataElement instance);
    partial void UpdateDataElement(GUI.Model.DataElement instance);
    partial void DeleteDataElement(GUI.Model.DataElement instance);
    partial void InsertProblem(GUI.Model.Problem instance);
    partial void UpdateProblem(GUI.Model.Problem instance);
    partial void DeleteProblem(GUI.Model.Problem instance);
    partial void InsertDataGroup_Element(GUI.Model.DataGroup_Element instance);
    partial void UpdateDataGroup_Element(GUI.Model.DataGroup_Element instance);
    partial void DeleteDataGroup_Element(GUI.Model.DataGroup_Element instance);
    partial void InsertDataGroup(GUI.Model.DataGroup instance);
    partial void UpdateDataGroup(GUI.Model.DataGroup instance);
    partial void DeleteDataGroup(GUI.Model.DataGroup instance);
    partial void InsertDataSource(GUI.Model.DataSource instance);
    partial void UpdateDataSource(GUI.Model.DataSource instance);
    partial void DeleteDataSource(GUI.Model.DataSource instance);
    partial void InsertDataType(GUI.Model.DataType instance);
    partial void UpdateDataType(GUI.Model.DataType instance);
    partial void DeleteDataType(GUI.Model.DataType instance);
    partial void InsertJob_DataElement(GUI.Model.Job_DataElement instance);
    partial void UpdateJob_DataElement(GUI.Model.Job_DataElement instance);
    partial void DeleteJob_DataElement(GUI.Model.Job_DataElement instance);
    partial void InsertJob_Option(GUI.Model.Job_Option instance);
    partial void UpdateJob_Option(GUI.Model.Job_Option instance);
    partial void DeleteJob_Option(GUI.Model.Job_Option instance);
    partial void InsertJobHistory(GUI.Model.JobHistory instance);
    partial void UpdateJobHistory(GUI.Model.JobHistory instance);
    partial void DeleteJobHistory(GUI.Model.JobHistory instance);
    partial void InsertOptionCategory(GUI.Model.OptionCategory instance);
    partial void UpdateOptionCategory(GUI.Model.OptionCategory instance);
    partial void DeleteOptionCategory(GUI.Model.OptionCategory instance);
    partial void InsertOption(GUI.Model.Option instance);
    partial void UpdateOption(GUI.Model.Option instance);
    partial void DeleteOption(GUI.Model.Option instance);
    partial void InsertProblem_DataElement(GUI.Model.Problem_DataElement instance);
    partial void UpdateProblem_DataElement(GUI.Model.Problem_DataElement instance);
    partial void DeleteProblem_DataElement(GUI.Model.Problem_DataElement instance);
    partial void InsertJob(GUI.Model.Job instance);
    partial void UpdateJob(GUI.Model.Job instance);
    partial void DeleteJob(GUI.Model.Job instance);
    #endregion
		
		public DB() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EaGUIConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GUI.Model.DataElement> DataElements
		{
			get
			{
				return this.GetTable<GUI.Model.DataElement>();
			}
		}
		
		public System.Data.Linq.Table<GUI.Model.Problem> Problems
		{
			get
			{
				return this.GetTable<GUI.Model.Problem>();
			}
		}
		
		public System.Data.Linq.Table<GUI.Model.DataGroup_Element> DataGroup_Elements
		{
			get
			{
				return this.GetTable<GUI.Model.DataGroup_Element>();
			}
		}
		
		public System.Data.Linq.Table<GUI.Model.DataGroup> DataGroups
		{
			get
			{
				return this.GetTable<GUI.Model.DataGroup>();
			}
		}
		
		public System.Data.Linq.Table<GUI.Model.DataSource> DataSources
		{
			get
			{
				return this.GetTable<GUI.Model.DataSource>();
			}
		}
		
		public System.Data.Linq.Table<GUI.Model.DataType> DataTypes
		{
			get
			{
				return this.GetTable<GUI.Model.DataType>();
			}
		}
		
		public System.Data.Linq.Table<GUI.Model.Job_DataElement> Job_DataElements
		{
			get
			{
				return this.GetTable<GUI.Model.Job_DataElement>();
			}
		}
		
		public System.Data.Linq.Table<GUI.Model.Job_Option> Job_Options
		{
			get
			{
				return this.GetTable<GUI.Model.Job_Option>();
			}
		}
		
		public System.Data.Linq.Table<GUI.Model.JobHistory> JobHistories
		{
			get
			{
				return this.GetTable<GUI.Model.JobHistory>();
			}
		}
		
		public System.Data.Linq.Table<GUI.Model.OptionCategory> OptionCategories
		{
			get
			{
				return this.GetTable<GUI.Model.OptionCategory>();
			}
		}
		
		public System.Data.Linq.Table<GUI.Model.Option> Options
		{
			get
			{
				return this.GetTable<GUI.Model.Option>();
			}
		}
		
		public System.Data.Linq.Table<GUI.Model.Problem_DataElement> Problem_DataElements
		{
			get
			{
				return this.GetTable<GUI.Model.Problem_DataElement>();
			}
		}
		
		public System.Data.Linq.Table<GUI.Model.Job> Jobs
		{
			get
			{
				return this.GetTable<GUI.Model.Job>();
			}
		}
	}
}
namespace GUI.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[Table(Name="dbo.DataElements")]
	public partial class DataElement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataElement_Id;
		
		private string _Name;
		
		private int _Source_Id;
		
		private int _DataType_Id;
		
		private EntitySet<DataGroup_Element> _DataGroup_Elements;
		
		private EntitySet<Job_DataElement> _Job_DataElements;
		
		private EntitySet<Problem_DataElement> _Problem_DataElements;
		
		private EntityRef<DataSource> _DataSource;
		
		private EntityRef<DataType> _DataType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataElement_IdChanging(int value);
    partial void OnDataElement_IdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSource_IdChanging(int value);
    partial void OnSource_IdChanged();
    partial void OnDataType_IdChanging(int value);
    partial void OnDataType_IdChanged();
    #endregion
		
		public DataElement()
		{
			this._DataGroup_Elements = new EntitySet<DataGroup_Element>(new Action<DataGroup_Element>(this.attach_DataGroup_Elements), new Action<DataGroup_Element>(this.detach_DataGroup_Elements));
			this._Job_DataElements = new EntitySet<Job_DataElement>(new Action<Job_DataElement>(this.attach_Job_DataElements), new Action<Job_DataElement>(this.detach_Job_DataElements));
			this._Problem_DataElements = new EntitySet<Problem_DataElement>(new Action<Problem_DataElement>(this.attach_Problem_DataElements), new Action<Problem_DataElement>(this.detach_Problem_DataElements));
			this._DataSource = default(EntityRef<DataSource>);
			this._DataType = default(EntityRef<DataType>);
			OnCreated();
		}
		
		[Column(Storage="_DataElement_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DataElement_Id
		{
			get
			{
				return this._DataElement_Id;
			}
			set
			{
				if ((this._DataElement_Id != value))
				{
					this.OnDataElement_IdChanging(value);
					this.SendPropertyChanging();
					this._DataElement_Id = value;
					this.SendPropertyChanged("DataElement_Id");
					this.OnDataElement_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Source_Id", DbType="Int NOT NULL")]
		public int Source_Id
		{
			get
			{
				return this._Source_Id;
			}
			set
			{
				if ((this._Source_Id != value))
				{
					if (this._DataSource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSource_IdChanging(value);
					this.SendPropertyChanging();
					this._Source_Id = value;
					this.SendPropertyChanged("Source_Id");
					this.OnSource_IdChanged();
				}
			}
		}
		
		[Column(Storage="_DataType_Id", DbType="Int NOT NULL")]
		public int DataType_Id
		{
			get
			{
				return this._DataType_Id;
			}
			set
			{
				if ((this._DataType_Id != value))
				{
					if (this._DataType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataType_IdChanging(value);
					this.SendPropertyChanging();
					this._DataType_Id = value;
					this.SendPropertyChanged("DataType_Id");
					this.OnDataType_IdChanged();
				}
			}
		}
		
		[Association(Name="DataElement_DataGroup_Element", Storage="_DataGroup_Elements", ThisKey="DataElement_Id", OtherKey="DataElement_Id")]
		public EntitySet<DataGroup_Element> DataGroup_Elements
		{
			get
			{
				return this._DataGroup_Elements;
			}
			set
			{
				this._DataGroup_Elements.Assign(value);
			}
		}
		
		[Association(Name="DataElement_Job_DataElement", Storage="_Job_DataElements", ThisKey="DataElement_Id", OtherKey="DataElement_Id")]
		public EntitySet<Job_DataElement> Job_DataElements
		{
			get
			{
				return this._Job_DataElements;
			}
			set
			{
				this._Job_DataElements.Assign(value);
			}
		}
		
		[Association(Name="DataElement_Problem_DataElement", Storage="_Problem_DataElements", ThisKey="DataElement_Id", OtherKey="DataElement_Id")]
		public EntitySet<Problem_DataElement> Problem_DataElements
		{
			get
			{
				return this._Problem_DataElements;
			}
			set
			{
				this._Problem_DataElements.Assign(value);
			}
		}
		
		[Association(Name="DataSource_DataElement", Storage="_DataSource", ThisKey="Source_Id", OtherKey="DataSource_Id", IsForeignKey=true)]
		public DataSource DataSource
		{
			get
			{
				return this._DataSource.Entity;
			}
			set
			{
				DataSource previousValue = this._DataSource.Entity;
				if (((previousValue != value) 
							|| (this._DataSource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataSource.Entity = null;
						previousValue.DataElements.Remove(this);
					}
					this._DataSource.Entity = value;
					if ((value != null))
					{
						value.DataElements.Add(this);
						this._Source_Id = value.DataSource_Id;
					}
					else
					{
						this._Source_Id = default(int);
					}
					this.SendPropertyChanged("DataSource");
				}
			}
		}
		
		[Association(Name="DataType_DataElement", Storage="_DataType", ThisKey="DataType_Id", OtherKey="DataType_Id", IsForeignKey=true)]
		public DataType DataType
		{
			get
			{
				return this._DataType.Entity;
			}
			set
			{
				DataType previousValue = this._DataType.Entity;
				if (((previousValue != value) 
							|| (this._DataType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataType.Entity = null;
						previousValue.DataElements.Remove(this);
					}
					this._DataType.Entity = value;
					if ((value != null))
					{
						value.DataElements.Add(this);
						this._DataType_Id = value.DataType_Id;
					}
					else
					{
						this._DataType_Id = default(int);
					}
					this.SendPropertyChanged("DataType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataGroup_Elements(DataGroup_Element entity)
		{
			this.SendPropertyChanging();
			entity.DataElement = this;
		}
		
		private void detach_DataGroup_Elements(DataGroup_Element entity)
		{
			this.SendPropertyChanging();
			entity.DataElement = null;
		}
		
		private void attach_Job_DataElements(Job_DataElement entity)
		{
			this.SendPropertyChanging();
			entity.DataElement = this;
		}
		
		private void detach_Job_DataElements(Job_DataElement entity)
		{
			this.SendPropertyChanging();
			entity.DataElement = null;
		}
		
		private void attach_Problem_DataElements(Problem_DataElement entity)
		{
			this.SendPropertyChanging();
			entity.DataElement = this;
		}
		
		private void detach_Problem_DataElements(Problem_DataElement entity)
		{
			this.SendPropertyChanging();
			entity.DataElement = null;
		}
	}
	
	[Table(Name="dbo.Problems")]
	public partial class Problem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Description;
		
		private int _Problem_Id;
		
		private EntitySet<Option> _Options;
		
		private EntitySet<Problem_DataElement> _Problem_DataElements;
		
		private EntitySet<Job> _Jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnProblem_IdChanging(int value);
    partial void OnProblem_IdChanged();
    #endregion
		
		public Problem()
		{
			this._Options = new EntitySet<Option>(new Action<Option>(this.attach_Options), new Action<Option>(this.detach_Options));
			this._Problem_DataElements = new EntitySet<Problem_DataElement>(new Action<Problem_DataElement>(this.attach_Problem_DataElements), new Action<Problem_DataElement>(this.detach_Problem_DataElements));
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			OnCreated();
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Problem_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Problem_Id
		{
			get
			{
				return this._Problem_Id;
			}
			set
			{
				if ((this._Problem_Id != value))
				{
					this.OnProblem_IdChanging(value);
					this.SendPropertyChanging();
					this._Problem_Id = value;
					this.SendPropertyChanged("Problem_Id");
					this.OnProblem_IdChanged();
				}
			}
		}
		
		[Association(Name="Problem_Option", Storage="_Options", ThisKey="Problem_Id", OtherKey="Problem_Id")]
		public EntitySet<Option> Options
		{
			get
			{
				return this._Options;
			}
			set
			{
				this._Options.Assign(value);
			}
		}
		
		[Association(Name="Problem_Problem_DataElement", Storage="_Problem_DataElements", ThisKey="Problem_Id", OtherKey="Problem_Id")]
		public EntitySet<Problem_DataElement> Problem_DataElements
		{
			get
			{
				return this._Problem_DataElements;
			}
			set
			{
				this._Problem_DataElements.Assign(value);
			}
		}
		
		[Association(Name="Problem_Job", Storage="_Jobs", ThisKey="Problem_Id", OtherKey="Problem_Id")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Options(Option entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_Options(Option entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
		
		private void attach_Problem_DataElements(Problem_DataElement entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_Problem_DataElements(Problem_DataElement entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
	}
	
	[Table(Name="dbo.DataGroup_Element")]
	public partial class DataGroup_Element : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataGroup_Id;
		
		private int _DataElement_Id;
		
		private EntityRef<DataElement> _DataElement;
		
		private EntityRef<DataGroup> _DataGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataGroup_IdChanging(int value);
    partial void OnDataGroup_IdChanged();
    partial void OnDataElement_IdChanging(int value);
    partial void OnDataElement_IdChanged();
    #endregion
		
		public DataGroup_Element()
		{
			this._DataElement = default(EntityRef<DataElement>);
			this._DataGroup = default(EntityRef<DataGroup>);
			OnCreated();
		}
		
		[Column(Storage="_DataGroup_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DataGroup_Id
		{
			get
			{
				return this._DataGroup_Id;
			}
			set
			{
				if ((this._DataGroup_Id != value))
				{
					if (this._DataGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataGroup_IdChanging(value);
					this.SendPropertyChanging();
					this._DataGroup_Id = value;
					this.SendPropertyChanged("DataGroup_Id");
					this.OnDataGroup_IdChanged();
				}
			}
		}
		
		[Column(Storage="_DataElement_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DataElement_Id
		{
			get
			{
				return this._DataElement_Id;
			}
			set
			{
				if ((this._DataElement_Id != value))
				{
					if (this._DataElement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataElement_IdChanging(value);
					this.SendPropertyChanging();
					this._DataElement_Id = value;
					this.SendPropertyChanged("DataElement_Id");
					this.OnDataElement_IdChanged();
				}
			}
		}
		
		[Association(Name="DataElement_DataGroup_Element", Storage="_DataElement", ThisKey="DataElement_Id", OtherKey="DataElement_Id", IsForeignKey=true)]
		public DataElement DataElement
		{
			get
			{
				return this._DataElement.Entity;
			}
			set
			{
				DataElement previousValue = this._DataElement.Entity;
				if (((previousValue != value) 
							|| (this._DataElement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataElement.Entity = null;
						previousValue.DataGroup_Elements.Remove(this);
					}
					this._DataElement.Entity = value;
					if ((value != null))
					{
						value.DataGroup_Elements.Add(this);
						this._DataElement_Id = value.DataElement_Id;
					}
					else
					{
						this._DataElement_Id = default(int);
					}
					this.SendPropertyChanged("DataElement");
				}
			}
		}
		
		[Association(Name="DataGroup_DataGroup_Element", Storage="_DataGroup", ThisKey="DataGroup_Id", OtherKey="DataGroup_Id", IsForeignKey=true)]
		public DataGroup DataGroup
		{
			get
			{
				return this._DataGroup.Entity;
			}
			set
			{
				DataGroup previousValue = this._DataGroup.Entity;
				if (((previousValue != value) 
							|| (this._DataGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataGroup.Entity = null;
						previousValue.DataGroup_Elements.Remove(this);
					}
					this._DataGroup.Entity = value;
					if ((value != null))
					{
						value.DataGroup_Elements.Add(this);
						this._DataGroup_Id = value.DataGroup_Id;
					}
					else
					{
						this._DataGroup_Id = default(int);
					}
					this.SendPropertyChanged("DataGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DataGroups")]
	public partial class DataGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataGroup_Id;
		
		private string _Name;
		
		private EntitySet<DataGroup_Element> _DataGroup_Elements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataGroup_IdChanging(int value);
    partial void OnDataGroup_IdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DataGroup()
		{
			this._DataGroup_Elements = new EntitySet<DataGroup_Element>(new Action<DataGroup_Element>(this.attach_DataGroup_Elements), new Action<DataGroup_Element>(this.detach_DataGroup_Elements));
			OnCreated();
		}
		
		[Column(Storage="_DataGroup_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DataGroup_Id
		{
			get
			{
				return this._DataGroup_Id;
			}
			set
			{
				if ((this._DataGroup_Id != value))
				{
					this.OnDataGroup_IdChanging(value);
					this.SendPropertyChanging();
					this._DataGroup_Id = value;
					this.SendPropertyChanged("DataGroup_Id");
					this.OnDataGroup_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="DataGroup_DataGroup_Element", Storage="_DataGroup_Elements", ThisKey="DataGroup_Id", OtherKey="DataGroup_Id")]
		public EntitySet<DataGroup_Element> DataGroup_Elements
		{
			get
			{
				return this._DataGroup_Elements;
			}
			set
			{
				this._DataGroup_Elements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataGroup_Elements(DataGroup_Element entity)
		{
			this.SendPropertyChanging();
			entity.DataGroup = this;
		}
		
		private void detach_DataGroup_Elements(DataGroup_Element entity)
		{
			this.SendPropertyChanging();
			entity.DataGroup = null;
		}
	}
	
	[Table(Name="dbo.DataSources")]
	public partial class DataSource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataSource_Id;
		
		private string _Name;
		
		private EntitySet<DataElement> _DataElements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataSource_IdChanging(int value);
    partial void OnDataSource_IdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DataSource()
		{
			this._DataElements = new EntitySet<DataElement>(new Action<DataElement>(this.attach_DataElements), new Action<DataElement>(this.detach_DataElements));
			OnCreated();
		}
		
		[Column(Storage="_DataSource_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DataSource_Id
		{
			get
			{
				return this._DataSource_Id;
			}
			set
			{
				if ((this._DataSource_Id != value))
				{
					this.OnDataSource_IdChanging(value);
					this.SendPropertyChanging();
					this._DataSource_Id = value;
					this.SendPropertyChanged("DataSource_Id");
					this.OnDataSource_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="DataSource_DataElement", Storage="_DataElements", ThisKey="DataSource_Id", OtherKey="Source_Id")]
		public EntitySet<DataElement> DataElements
		{
			get
			{
				return this._DataElements;
			}
			set
			{
				this._DataElements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataElements(DataElement entity)
		{
			this.SendPropertyChanging();
			entity.DataSource = this;
		}
		
		private void detach_DataElements(DataElement entity)
		{
			this.SendPropertyChanging();
			entity.DataSource = null;
		}
	}
	
	[Table(Name="dbo.DataTypes")]
	public partial class DataType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataType_Id;
		
		private string _Name;
		
		private EntitySet<DataElement> _DataElements;
		
		private EntitySet<Option> _Options;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataType_IdChanging(int value);
    partial void OnDataType_IdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DataType()
		{
			this._DataElements = new EntitySet<DataElement>(new Action<DataElement>(this.attach_DataElements), new Action<DataElement>(this.detach_DataElements));
			this._Options = new EntitySet<Option>(new Action<Option>(this.attach_Options), new Action<Option>(this.detach_Options));
			OnCreated();
		}
		
		[Column(Storage="_DataType_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DataType_Id
		{
			get
			{
				return this._DataType_Id;
			}
			set
			{
				if ((this._DataType_Id != value))
				{
					this.OnDataType_IdChanging(value);
					this.SendPropertyChanging();
					this._DataType_Id = value;
					this.SendPropertyChanged("DataType_Id");
					this.OnDataType_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="DataType_DataElement", Storage="_DataElements", ThisKey="DataType_Id", OtherKey="DataType_Id")]
		public EntitySet<DataElement> DataElements
		{
			get
			{
				return this._DataElements;
			}
			set
			{
				this._DataElements.Assign(value);
			}
		}
		
		[Association(Name="DataType_Option", Storage="_Options", ThisKey="DataType_Id", OtherKey="DataType_Id")]
		public EntitySet<Option> Options
		{
			get
			{
				return this._Options;
			}
			set
			{
				this._Options.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataElements(DataElement entity)
		{
			this.SendPropertyChanging();
			entity.DataType = this;
		}
		
		private void detach_DataElements(DataElement entity)
		{
			this.SendPropertyChanging();
			entity.DataType = null;
		}
		
		private void attach_Options(Option entity)
		{
			this.SendPropertyChanging();
			entity.DataType = this;
		}
		
		private void detach_Options(Option entity)
		{
			this.SendPropertyChanging();
			entity.DataType = null;
		}
	}
	
	[Table(Name="dbo.Job_DataElement")]
	public partial class Job_DataElement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Job_Id;
		
		private int _DataElement_Id;
		
		private EntityRef<DataElement> _DataElement;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJob_IdChanging(int value);
    partial void OnJob_IdChanged();
    partial void OnDataElement_IdChanging(int value);
    partial void OnDataElement_IdChanged();
    #endregion
		
		public Job_DataElement()
		{
			this._DataElement = default(EntityRef<DataElement>);
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[Column(Storage="_Job_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Job_Id
		{
			get
			{
				return this._Job_Id;
			}
			set
			{
				if ((this._Job_Id != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJob_IdChanging(value);
					this.SendPropertyChanging();
					this._Job_Id = value;
					this.SendPropertyChanged("Job_Id");
					this.OnJob_IdChanged();
				}
			}
		}
		
		[Column(Storage="_DataElement_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DataElement_Id
		{
			get
			{
				return this._DataElement_Id;
			}
			set
			{
				if ((this._DataElement_Id != value))
				{
					if (this._DataElement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataElement_IdChanging(value);
					this.SendPropertyChanging();
					this._DataElement_Id = value;
					this.SendPropertyChanged("DataElement_Id");
					this.OnDataElement_IdChanged();
				}
			}
		}
		
		[Association(Name="DataElement_Job_DataElement", Storage="_DataElement", ThisKey="DataElement_Id", OtherKey="DataElement_Id", IsForeignKey=true)]
		public DataElement DataElement
		{
			get
			{
				return this._DataElement.Entity;
			}
			set
			{
				DataElement previousValue = this._DataElement.Entity;
				if (((previousValue != value) 
							|| (this._DataElement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataElement.Entity = null;
						previousValue.Job_DataElements.Remove(this);
					}
					this._DataElement.Entity = value;
					if ((value != null))
					{
						value.Job_DataElements.Add(this);
						this._DataElement_Id = value.DataElement_Id;
					}
					else
					{
						this._DataElement_Id = default(int);
					}
					this.SendPropertyChanged("DataElement");
				}
			}
		}
		
		[Association(Name="Job_Job_DataElement", Storage="_Job", ThisKey="Job_Id", OtherKey="Job_Id", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.Job_DataElements.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.Job_DataElements.Add(this);
						this._Job_Id = value.Job_Id;
					}
					else
					{
						this._Job_Id = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Job_Option")]
	public partial class Job_Option : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Job_Id;
		
		private int _Option_Id;
		
		private string _String_Value;
		
		private System.Nullable<double> _Float_Value;
		
		private System.Nullable<bool> _Bit_Value;
		
		private EntityRef<Option> _Option;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJob_IdChanging(int value);
    partial void OnJob_IdChanged();
    partial void OnOption_IdChanging(int value);
    partial void OnOption_IdChanged();
    partial void OnString_ValueChanging(string value);
    partial void OnString_ValueChanged();
    partial void OnFloat_ValueChanging(System.Nullable<double> value);
    partial void OnFloat_ValueChanged();
    partial void OnBit_ValueChanging(System.Nullable<bool> value);
    partial void OnBit_ValueChanged();
    #endregion
		
		public Job_Option()
		{
			this._Option = default(EntityRef<Option>);
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[Column(Storage="_Job_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Job_Id
		{
			get
			{
				return this._Job_Id;
			}
			set
			{
				if ((this._Job_Id != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJob_IdChanging(value);
					this.SendPropertyChanging();
					this._Job_Id = value;
					this.SendPropertyChanged("Job_Id");
					this.OnJob_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Option_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Option_Id
		{
			get
			{
				return this._Option_Id;
			}
			set
			{
				if ((this._Option_Id != value))
				{
					if (this._Option.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOption_IdChanging(value);
					this.SendPropertyChanging();
					this._Option_Id = value;
					this.SendPropertyChanged("Option_Id");
					this.OnOption_IdChanged();
				}
			}
		}
		
		[Column(Storage="_String_Value", DbType="NVarChar(500)")]
		public string String_Value
		{
			get
			{
				return this._String_Value;
			}
			set
			{
				if ((this._String_Value != value))
				{
					this.OnString_ValueChanging(value);
					this.SendPropertyChanging();
					this._String_Value = value;
					this.SendPropertyChanged("String_Value");
					this.OnString_ValueChanged();
				}
			}
		}
		
		[Column(Storage="_Float_Value", DbType="Float")]
		public System.Nullable<double> Float_Value
		{
			get
			{
				return this._Float_Value;
			}
			set
			{
				if ((this._Float_Value != value))
				{
					this.OnFloat_ValueChanging(value);
					this.SendPropertyChanging();
					this._Float_Value = value;
					this.SendPropertyChanged("Float_Value");
					this.OnFloat_ValueChanged();
				}
			}
		}
		
		[Column(Storage="_Bit_Value", DbType="Bit")]
		public System.Nullable<bool> Bit_Value
		{
			get
			{
				return this._Bit_Value;
			}
			set
			{
				if ((this._Bit_Value != value))
				{
					this.OnBit_ValueChanging(value);
					this.SendPropertyChanging();
					this._Bit_Value = value;
					this.SendPropertyChanged("Bit_Value");
					this.OnBit_ValueChanged();
				}
			}
		}
		
		[Association(Name="Option_Job_Option", Storage="_Option", ThisKey="Option_Id", OtherKey="Option_Id", IsForeignKey=true)]
		public Option Option
		{
			get
			{
				return this._Option.Entity;
			}
			set
			{
				Option previousValue = this._Option.Entity;
				if (((previousValue != value) 
							|| (this._Option.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Option.Entity = null;
						previousValue.Job_Options.Remove(this);
					}
					this._Option.Entity = value;
					if ((value != null))
					{
						value.Job_Options.Add(this);
						this._Option_Id = value.Option_Id;
					}
					else
					{
						this._Option_Id = default(int);
					}
					this.SendPropertyChanged("Option");
				}
			}
		}
		
		[Association(Name="Job_Job_Option", Storage="_Job", ThisKey="Job_Id", OtherKey="Job_Id", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.Job_Options.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.Job_Options.Add(this);
						this._Job_Id = value.Job_Id;
					}
					else
					{
						this._Job_Id = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.JobHistory")]
	public partial class JobHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobHistory_Id;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private string _Status;
		
		private int _Job_Id;
		
		private string _Username;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobHistory_IdChanging(int value);
    partial void OnJobHistory_IdChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnJob_IdChanging(int value);
    partial void OnJob_IdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
		
		public JobHistory()
		{
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[Column(Storage="_JobHistory_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobHistory_Id
		{
			get
			{
				return this._JobHistory_Id;
			}
			set
			{
				if ((this._JobHistory_Id != value))
				{
					this.OnJobHistory_IdChanging(value);
					this.SendPropertyChanging();
					this._JobHistory_Id = value;
					this.SendPropertyChanged("JobHistory_Id");
					this.OnJobHistory_IdChanged();
				}
			}
		}
		
		[Column(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Job_Id", DbType="Int NOT NULL")]
		public int Job_Id
		{
			get
			{
				return this._Job_Id;
			}
			set
			{
				if ((this._Job_Id != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJob_IdChanging(value);
					this.SendPropertyChanging();
					this._Job_Id = value;
					this.SendPropertyChanged("Job_Id");
					this.OnJob_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="NVarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Association(Name="Job_JobHistory", Storage="_Job", ThisKey="Job_Id", OtherKey="Job_Id", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.JobHistories.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.JobHistories.Add(this);
						this._Job_Id = value.Job_Id;
					}
					else
					{
						this._Job_Id = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OptionCategories")]
	public partial class OptionCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OptionCategory_Id;
		
		private string _Name;
		
		private EntitySet<Option> _Options;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOptionCategory_IdChanging(int value);
    partial void OnOptionCategory_IdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public OptionCategory()
		{
			this._Options = new EntitySet<Option>(new Action<Option>(this.attach_Options), new Action<Option>(this.detach_Options));
			OnCreated();
		}
		
		[Column(Storage="_OptionCategory_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OptionCategory_Id
		{
			get
			{
				return this._OptionCategory_Id;
			}
			set
			{
				if ((this._OptionCategory_Id != value))
				{
					this.OnOptionCategory_IdChanging(value);
					this.SendPropertyChanging();
					this._OptionCategory_Id = value;
					this.SendPropertyChanged("OptionCategory_Id");
					this.OnOptionCategory_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="OptionCategory_Option", Storage="_Options", ThisKey="OptionCategory_Id", OtherKey="OptionCategory_Id")]
		public EntitySet<Option> Options
		{
			get
			{
				return this._Options;
			}
			set
			{
				this._Options.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Options(Option entity)
		{
			this.SendPropertyChanging();
			entity.OptionCategory = this;
		}
		
		private void detach_Options(Option entity)
		{
			this.SendPropertyChanging();
			entity.OptionCategory = null;
		}
	}
	
	[Table(Name="dbo.Options")]
	public partial class Option : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Option_Id;
		
		private string _Name;
		
		private string _Description;
		
		private int _OptionCategory_Id;
		
		private System.Nullable<int> _DataType_Id;
		
		private System.Nullable<int> _Problem_Id;
		
		private System.Nullable<double> _MaxValue;
		
		private System.Nullable<double> _MinValue;
		
		private System.Nullable<bool> _AllowMultipleSelection;
		
		private EntitySet<Job_Option> _Job_Options;
		
		private EntityRef<OptionCategory> _OptionCategory;
		
		private EntityRef<DataType> _DataType;
		
		private EntityRef<Problem> _Problem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOption_IdChanging(int value);
    partial void OnOption_IdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOptionCategory_IdChanging(int value);
    partial void OnOptionCategory_IdChanged();
    partial void OnDataType_IdChanging(System.Nullable<int> value);
    partial void OnDataType_IdChanged();
    partial void OnProblem_IdChanging(System.Nullable<int> value);
    partial void OnProblem_IdChanged();
    partial void OnMaxValueChanging(System.Nullable<double> value);
    partial void OnMaxValueChanged();
    partial void OnMinValueChanging(System.Nullable<double> value);
    partial void OnMinValueChanged();
    partial void OnAllowMultipleSelectionChanging(System.Nullable<bool> value);
    partial void OnAllowMultipleSelectionChanged();
    #endregion
		
		public Option()
		{
			this._Job_Options = new EntitySet<Job_Option>(new Action<Job_Option>(this.attach_Job_Options), new Action<Job_Option>(this.detach_Job_Options));
			this._OptionCategory = default(EntityRef<OptionCategory>);
			this._DataType = default(EntityRef<DataType>);
			this._Problem = default(EntityRef<Problem>);
			OnCreated();
		}
		
		[Column(Storage="_Option_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Option_Id
		{
			get
			{
				return this._Option_Id;
			}
			set
			{
				if ((this._Option_Id != value))
				{
					this.OnOption_IdChanging(value);
					this.SendPropertyChanging();
					this._Option_Id = value;
					this.SendPropertyChanged("Option_Id");
					this.OnOption_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_OptionCategory_Id", DbType="Int NOT NULL")]
		public int OptionCategory_Id
		{
			get
			{
				return this._OptionCategory_Id;
			}
			set
			{
				if ((this._OptionCategory_Id != value))
				{
					if (this._OptionCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOptionCategory_IdChanging(value);
					this.SendPropertyChanging();
					this._OptionCategory_Id = value;
					this.SendPropertyChanged("OptionCategory_Id");
					this.OnOptionCategory_IdChanged();
				}
			}
		}
		
		[Column(Storage="_DataType_Id", DbType="Int")]
		public System.Nullable<int> DataType_Id
		{
			get
			{
				return this._DataType_Id;
			}
			set
			{
				if ((this._DataType_Id != value))
				{
					if (this._DataType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataType_IdChanging(value);
					this.SendPropertyChanging();
					this._DataType_Id = value;
					this.SendPropertyChanged("DataType_Id");
					this.OnDataType_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Problem_Id", DbType="Int")]
		public System.Nullable<int> Problem_Id
		{
			get
			{
				return this._Problem_Id;
			}
			set
			{
				if ((this._Problem_Id != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblem_IdChanging(value);
					this.SendPropertyChanging();
					this._Problem_Id = value;
					this.SendPropertyChanged("Problem_Id");
					this.OnProblem_IdChanged();
				}
			}
		}
		
		[Column(Storage="_MaxValue", DbType="Float")]
		public System.Nullable<double> MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[Column(Storage="_MinValue", DbType="Float")]
		public System.Nullable<double> MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[Column(Storage="_AllowMultipleSelection", DbType="Bit")]
		public System.Nullable<bool> AllowMultipleSelection
		{
			get
			{
				return this._AllowMultipleSelection;
			}
			set
			{
				if ((this._AllowMultipleSelection != value))
				{
					this.OnAllowMultipleSelectionChanging(value);
					this.SendPropertyChanging();
					this._AllowMultipleSelection = value;
					this.SendPropertyChanged("AllowMultipleSelection");
					this.OnAllowMultipleSelectionChanged();
				}
			}
		}
		
		[Association(Name="Option_Job_Option", Storage="_Job_Options", ThisKey="Option_Id", OtherKey="Option_Id")]
		public EntitySet<Job_Option> Job_Options
		{
			get
			{
				return this._Job_Options;
			}
			set
			{
				this._Job_Options.Assign(value);
			}
		}
		
		[Association(Name="OptionCategory_Option", Storage="_OptionCategory", ThisKey="OptionCategory_Id", OtherKey="OptionCategory_Id", IsForeignKey=true)]
		public OptionCategory OptionCategory
		{
			get
			{
				return this._OptionCategory.Entity;
			}
			set
			{
				OptionCategory previousValue = this._OptionCategory.Entity;
				if (((previousValue != value) 
							|| (this._OptionCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OptionCategory.Entity = null;
						previousValue.Options.Remove(this);
					}
					this._OptionCategory.Entity = value;
					if ((value != null))
					{
						value.Options.Add(this);
						this._OptionCategory_Id = value.OptionCategory_Id;
					}
					else
					{
						this._OptionCategory_Id = default(int);
					}
					this.SendPropertyChanged("OptionCategory");
				}
			}
		}
		
		[Association(Name="DataType_Option", Storage="_DataType", ThisKey="DataType_Id", OtherKey="DataType_Id", IsForeignKey=true)]
		public DataType DataType
		{
			get
			{
				return this._DataType.Entity;
			}
			set
			{
				DataType previousValue = this._DataType.Entity;
				if (((previousValue != value) 
							|| (this._DataType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataType.Entity = null;
						previousValue.Options.Remove(this);
					}
					this._DataType.Entity = value;
					if ((value != null))
					{
						value.Options.Add(this);
						this._DataType_Id = value.DataType_Id;
					}
					else
					{
						this._DataType_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("DataType");
				}
			}
		}
		
		[Association(Name="Problem_Option", Storage="_Problem", ThisKey="Problem_Id", OtherKey="Problem_Id", IsForeignKey=true)]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.Options.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.Options.Add(this);
						this._Problem_Id = value.Problem_Id;
					}
					else
					{
						this._Problem_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Job_Options(Job_Option entity)
		{
			this.SendPropertyChanging();
			entity.Option = this;
		}
		
		private void detach_Job_Options(Job_Option entity)
		{
			this.SendPropertyChanging();
			entity.Option = null;
		}
	}
	
	[Table(Name="dbo.Problem_DataElement")]
	public partial class Problem_DataElement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Problem_Id;
		
		private int _DataElement_Id;
		
		private EntityRef<DataElement> _DataElement;
		
		private EntityRef<Problem> _Problem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProblem_IdChanging(int value);
    partial void OnProblem_IdChanged();
    partial void OnDataElement_IdChanging(int value);
    partial void OnDataElement_IdChanged();
    #endregion
		
		public Problem_DataElement()
		{
			this._DataElement = default(EntityRef<DataElement>);
			this._Problem = default(EntityRef<Problem>);
			OnCreated();
		}
		
		[Column(Storage="_Problem_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Problem_Id
		{
			get
			{
				return this._Problem_Id;
			}
			set
			{
				if ((this._Problem_Id != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblem_IdChanging(value);
					this.SendPropertyChanging();
					this._Problem_Id = value;
					this.SendPropertyChanged("Problem_Id");
					this.OnProblem_IdChanged();
				}
			}
		}
		
		[Column(Storage="_DataElement_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DataElement_Id
		{
			get
			{
				return this._DataElement_Id;
			}
			set
			{
				if ((this._DataElement_Id != value))
				{
					if (this._DataElement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataElement_IdChanging(value);
					this.SendPropertyChanging();
					this._DataElement_Id = value;
					this.SendPropertyChanged("DataElement_Id");
					this.OnDataElement_IdChanged();
				}
			}
		}
		
		[Association(Name="DataElement_Problem_DataElement", Storage="_DataElement", ThisKey="DataElement_Id", OtherKey="DataElement_Id", IsForeignKey=true)]
		public DataElement DataElement
		{
			get
			{
				return this._DataElement.Entity;
			}
			set
			{
				DataElement previousValue = this._DataElement.Entity;
				if (((previousValue != value) 
							|| (this._DataElement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataElement.Entity = null;
						previousValue.Problem_DataElements.Remove(this);
					}
					this._DataElement.Entity = value;
					if ((value != null))
					{
						value.Problem_DataElements.Add(this);
						this._DataElement_Id = value.DataElement_Id;
					}
					else
					{
						this._DataElement_Id = default(int);
					}
					this.SendPropertyChanged("DataElement");
				}
			}
		}
		
		[Association(Name="Problem_Problem_DataElement", Storage="_Problem", ThisKey="Problem_Id", OtherKey="Problem_Id", IsForeignKey=true)]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.Problem_DataElements.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.Problem_DataElements.Add(this);
						this._Problem_Id = value.Problem_Id;
					}
					else
					{
						this._Problem_Id = default(int);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Jobs")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Job_Id;
		
		private string _Name;
		
		private bool _IsTemplate;
		
		private int _Problem_Id;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private string _Stats;
		
		private string _Comment;
		
		private string _Parameters;
		
		private string _Status;
		
		private EntitySet<Job_DataElement> _Job_DataElements;
		
		private EntitySet<Job_Option> _Job_Options;
		
		private EntitySet<JobHistory> _JobHistories;
		
		private EntityRef<Problem> _Problem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJob_IdChanging(int value);
    partial void OnJob_IdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsTemplateChanging(bool value);
    partial void OnIsTemplateChanged();
    partial void OnProblem_IdChanging(int value);
    partial void OnProblem_IdChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnStatsChanging(string value);
    partial void OnStatsChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnParametersChanging(string value);
    partial void OnParametersChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Job()
		{
			this._Job_DataElements = new EntitySet<Job_DataElement>(new Action<Job_DataElement>(this.attach_Job_DataElements), new Action<Job_DataElement>(this.detach_Job_DataElements));
			this._Job_Options = new EntitySet<Job_Option>(new Action<Job_Option>(this.attach_Job_Options), new Action<Job_Option>(this.detach_Job_Options));
			this._JobHistories = new EntitySet<JobHistory>(new Action<JobHistory>(this.attach_JobHistories), new Action<JobHistory>(this.detach_JobHistories));
			this._Problem = default(EntityRef<Problem>);
			OnCreated();
		}
		
		[Column(Storage="_Job_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Job_Id
		{
			get
			{
				return this._Job_Id;
			}
			set
			{
				if ((this._Job_Id != value))
				{
					this.OnJob_IdChanging(value);
					this.SendPropertyChanging();
					this._Job_Id = value;
					this.SendPropertyChanged("Job_Id");
					this.OnJob_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsTemplate", DbType="Bit NOT NULL")]
		public bool IsTemplate
		{
			get
			{
				return this._IsTemplate;
			}
			set
			{
				if ((this._IsTemplate != value))
				{
					this.OnIsTemplateChanging(value);
					this.SendPropertyChanging();
					this._IsTemplate = value;
					this.SendPropertyChanged("IsTemplate");
					this.OnIsTemplateChanged();
				}
			}
		}
		
		[Column(Storage="_Problem_Id", DbType="Int NOT NULL")]
		public int Problem_Id
		{
			get
			{
				return this._Problem_Id;
			}
			set
			{
				if ((this._Problem_Id != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblem_IdChanging(value);
					this.SendPropertyChanging();
					this._Problem_Id = value;
					this.SendPropertyChanged("Problem_Id");
					this.OnProblem_IdChanged();
				}
			}
		}
		
		[Column(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Stats", DbType="NVarChar(MAX)")]
		public string Stats
		{
			get
			{
				return this._Stats;
			}
			set
			{
				if ((this._Stats != value))
				{
					this.OnStatsChanging(value);
					this.SendPropertyChanging();
					this._Stats = value;
					this.SendPropertyChanged("Stats");
					this.OnStatsChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_Parameters", DbType="NVarChar(MAX)")]
		public string Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				if ((this._Parameters != value))
				{
					this.OnParametersChanging(value);
					this.SendPropertyChanging();
					this._Parameters = value;
					this.SendPropertyChanged("Parameters");
					this.OnParametersChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="Job_Job_DataElement", Storage="_Job_DataElements", ThisKey="Job_Id", OtherKey="Job_Id")]
		public EntitySet<Job_DataElement> Job_DataElements
		{
			get
			{
				return this._Job_DataElements;
			}
			set
			{
				this._Job_DataElements.Assign(value);
			}
		}
		
		[Association(Name="Job_Job_Option", Storage="_Job_Options", ThisKey="Job_Id", OtherKey="Job_Id")]
		public EntitySet<Job_Option> Job_Options
		{
			get
			{
				return this._Job_Options;
			}
			set
			{
				this._Job_Options.Assign(value);
			}
		}
		
		[Association(Name="Job_JobHistory", Storage="_JobHistories", ThisKey="Job_Id", OtherKey="Job_Id")]
		public EntitySet<JobHistory> JobHistories
		{
			get
			{
				return this._JobHistories;
			}
			set
			{
				this._JobHistories.Assign(value);
			}
		}
		
		[Association(Name="Problem_Job", Storage="_Problem", ThisKey="Problem_Id", OtherKey="Problem_Id", IsForeignKey=true)]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._Problem_Id = value.Problem_Id;
					}
					else
					{
						this._Problem_Id = default(int);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Job_DataElements(Job_DataElement entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_Job_DataElements(Job_DataElement entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_Job_Options(Job_Option entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_Job_Options(Job_Option entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_JobHistories(JobHistory entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_JobHistories(JobHistory entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
}
#pragma warning restore 1591
